https://www.youtube.com/watch?v=ZKo3jn5L0yY&t=123s

php artisan migrate --path=/database/migrations/2025_01_11_075203_add_after_before_column_to_results_table.php
php artisan make:migration add_order_column_to_game_lists_table --table=game_lists

php artisan make:migration make_name_and_phone_nullable_in_users_table --table=users

sudo ln -s /etc/nginx/sites-available/ponewine20x.xyz /etc/nginx/sites-available/ponewine20x.xyz
// to remove laravel log
php -r "file_put_contents('/var/www/gsc_pone_wine_new_a/storage/logs/laravel.log', '');"
// created dev branch for kzt

php artisan migrate:rollback --path=database/migrations/2024_03_10_135549_create_reports_table.php
// tail log

tail -f /var/www/gsc_pone_wine_new_a/storage/logs/laravel.log

php artisan db:seed --class=SpecialGameListTableSeeder
sudo apt update && sudo apt install supervisor -y
sudo nano /etc/supervisor/conf.d/laravel-queue.conf
[program:laravel-queue]
process_name=%(program_name)s_%(process_num)02d
command=php /var/www/html/artisan queue:work --tries=3
autostart=true
autorestart=true
numprocs=1
redirect_stderr=true
stdout_logfile=/var/log/laravel-queue.log

URL: https://ttt930sc.site/
Login ID: P17440074
Password: passwordvip
Amount: 20000
--
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start laravel-queue

sudo tail -f /var/log/supervisor/supervisord.log

sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl stop laravel-queue
sudo supervisorctl start laravel-queue
sudo supervisorctl status





sudo nano /etc/php/8.3/fpm/php.ini

sudo su ubuntu
crontab -e

* * * * * cd /var/www/gsc_pone_wine_new_a && php artisan schedule:run >> /dev/null 2>&1

tail -f /var/log/mysql/error.log

sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf

php artisan make:migration add_agent_link_to_users_table --table=users

// to add column
ALTER TABLE transactions
ADD COLUMN agent_id INT(11) AFTER name;


SHOW PROCESSLIST;


SHOW INDEX FROM reports;
SHOW INDEX FROM seamless_transactions;
CREATE INDEX idx_wager_id ON reports (wager_id);
CREATE INDEX idx_seamless_transaction_id ON seamless_transactions (seamless_transaction_id);
EXPLAIN SELECT * FROM reports WHERE wager_id = 2462359211;


sudo chmod -R 775 /var/www/html/bossi_a/storage/logs/
sudo chown -R www-data:www-data /var/www/html/bossi_a/storage/logs


SET GLOBAL innodb_print_all_deadlocks = 1;

SHOW VARIABLES LIKE 'transaction_isolation';
SET GLOBAL innodb_lock_wait_timeout = 100;
------------
cd /etc/mysql/my.cnf
[mysqld]
transaction-isolation = READ-COMMITTED
---------------
SELECT INDEX_NAME, LOCK_TYPE, LOCK_DATA, LOCK_MODE, LOCK_STATUS, EVENT_ID
FROM performance_schema.data_locks;

SELECT * FROM performance_schema.setup_instruments WHERE NAME LIKE '%data_lock%' AND ENABLED = 'YES';

UPDATE performance_schema.setup_instruments
SET ENABLED = 'YES'
WHERE NAME LIKE '%data_lock%';
SET GLOBAL innodb_status_output=ON;
SET GLOBAL innodb_status_output_locks=ON;





# Set the ownership of the entire project directory to www-data user and group
chown -R www-data:www-data /var/www/html/slot_multi_banner_prod

# Set directory permissions to allow access
chmod -R 755 /var/www/html/bossi_a

# Ensure storage directory is owned by www-data
sudo chown -R www-data:www-data /var/www/html/bossi_a/storage

# Ensure bootstrap cache directory is owned by www-data
sudo chown -R www-data:www-data /var/www/html/bossi_a/bootstrap/cache

# Set correct permissions for storage directory
sudo chmod -R 775 /var/www/html/bossi_a/storage

# Set correct permissions for bootstrap cache directory
sudo chmod -R 775 /var/www/html/bossi_a/bootstrap/cache
ls -al /var/www/html/bossi_a
sudo systemctl restart nginx
---------
Redis install
sudo apt update
sudo apt upgrade
sudo apt install redis-server
sudo nano /etc/redis/redis.conf
supervised systemd // change no to systemd
sudo systemctl restart redis.service
redis-cli ping
PONG // out
sudo systemctl enable redis-server
sudo systemctl restart redis-server
sudo systemctl status redis-server

shan db setup

mysql> CREATE DATABASE shan;
Query OK, 1 row affected (0.01 sec)

mysql> CREATE USER 'shan_user'@'localhost' IDENTIFIED BY 'StrongPassword123!';
Query OK, 0 rows affected (0.02 sec)

mysql> GRANT ALL PRIVILEGES ON shan.* TO 'new_user'@'localhost';
Query OK, 0 rows affected (0.01 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.01 sec)

mysql> exit;
Bye

sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf
change bind-address 127.0.0.1 to 0.0.0.0

GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
set up
01 - GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
02- GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_user'@'1.2.165.234';
03 - GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_user'@'1.2.165.234' WITH GRANT OPTION;
FLUSH PRIVILEGES;

1 - CREATE USER 'shan_remote_connect'@'47.129.221.143' IDENTIFIED BY 'StrongPassword123!';
2 - GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_connect'@'47.129.221.143';
3 - FLUSH PRIVILEGES;

GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_user_prod'@'%' IDENTIFIED BY 'StrongPassword123!';

GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_connect'@'%';

CREATE USER 'shan_remote_user_prod'@'%' IDENTIFIED BY 'StrongPassword123!';

SHOW GRANTS FOR 'shan_remote_user'@'1.2.165.234';
SHOW GRANTS FOR 'shan_remote_user'@'52.77.209.90';
SHOW GRANTS FOR 'shan_remote_user_prod'@'%';

 SHOW GRANTS FOR 'shan_remote_connect'@'47.129.221.143';

## to check connect ##
CREATE USER 'shan_remote_connect'@'103.121.227.231' IDENTIFIED BY 'StrongPassword123!';
GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_connect'@'103.121.227.231';
FLUSH PRIVILEGES;

CREATE USER 'shan_remote_connect'@'47.129.221.143' IDENTIFIED BY 'StrongPassword123!';
GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_connect'@'47.129.221.143';
FLUSH PRIVILEGES;

SELECT user, host FROM mysql.user WHERE user = 'shan_remote_connect';
SELECT host, user, authentication_string FROM mysql.user WHERE user = 'shan_remote_connect';

## confirm
DROP USER 'shan_remote_connect'@'47.129.221.143';
CREATE USER 'shan_remote_connect'@'https://ec2-47-129-221-143.ap-southeast-1.compute.amazonaws.com' IDENTIFIED BY 'StrongPassword123!';


GRANT SELECT, INSERT, UPDATE, DELETE ON slot_maker.users TO 'shan_remote_connect'@'https://ec2-47-129-221-143.ap-southeast-1.compute.amazonaws.com';
FLUSH PRIVILEGES;

SHOW GRANTS FOR 'shan_prod'@'%';

GRANT SELECT ON slot_maker.users TO 'shan_remote_connect'@'https://ec2-47-129-221-143.ap-southeast-1.compute.amazonaws.com';
FLUSH PRIVILEGES;


CREATE USER 'shan_prod'@'ec2-47-129-221-143.ap-southeast-1.compute.amazonaws.com' IDENTIFIED BY 'StrongPassword123!';

GRANT SELECT, INSERT, UPDATE, DELETE ON slot_maker.users TO 'shan_remote_prod'@'ec2-47-129-221-143.ap-southeast-1.compute.amazonaws.com';

FLUSH PRIVILEGES;
DROP USER 'shan_remote_prod'@'ec2-47-129-221-143.ap-southeast-1.compute.amazonaws.com';

CREATE USER 'shan_prod'@'%' IDENTIFIED BY 'StrongPassword123!';

GRANT SELECT, INSERT, UPDATE, DELETE ON slot_maker.users TO 'shan_prod'@'%';

FLUSH PRIVILEGES;

O22856518



php artisan result:delete-old-backups "2024-12-18" "2024-12-19"

php artisan bet:delete-old-backups "2024-12-10" "2024-12-11"


{
    "game_type_id": 1,
    "players": [
        {
            "player_id": "5",
            "player_name": "Alice",
            "win_lose_status": 1,
            "bet_amount": 100,
            "amount_changed": 50
        },
        {
            "player_id": "6",
            "player_name": "Bob",
            "win_lose_status": 0,
            "bet_amount": 150,
            "amount_changed": 20
        },
        {
            "player_id": "7",
            "player_name": "Charlie",
            "win_lose_status": 1,
            "bet_amount": 200,
            "amount_changed": 80
        }
    ]
}


sudo certbot --nginx -d delightmyanmarmmk.xyz -d www.delightmyanmarmmk.xyz -d superman788.online -d www.superman788.online -d asaibetslot.online -d www.asaibetslot.online



1 - CREATE USER 'mksuperman'@'104.248.159.5' IDENTIFIED BY 'StrongPassword123!';
2 - GRANT ALL PRIVILEGES ON superman.* TO 'mksuperman'@'104.248.159.5';
3 - FLUSH PRIVILEGES;

GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_user_prod'@'%' IDENTIFIED BY 'StrongPassword123!';

GRANT ALL PRIVILEGES ON slot_maker.* TO 'shan_remote_connect'@'%';

CREATE USER 'mksuperman'@'104.248.159.5' IDENTIFIED BY 'StrongPassword123!';
GRANT ALL PRIVILEGES ON mk_slot.* TO 'mksuperman'@'104.248.159.5';
FLUSH PRIVILEGES;


SHOW GRANTS FOR 'mksuperman'@'139.59.91.201';
CREATE USER 'mksuperman'@'139.59.91.201' IDENTIFIED BY 'StrongPassword123!';
GRANT ALL PRIVILEGES ON superman.* TO 'mksuperman'@'139.59.91.201';
FLUSH PRIVILEGES;



@extends('layouts.master')
@section('content')
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Dashboard</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active">Dashboard v1</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-info">
                    <div class="inner">
                        <h3>{{ number_format($user->wallet->balanceFloat, 2) }}</h3>
                        <p>Balance</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-bag"></i>
                    </div>
                    <a href="#" class="small-box-footer"> <i class="fas "></i></a>
                </div>
            </div>
            @if ($role['0'] == 'Senior')
            <!-- ./col -->
            <div class="col-lg-4 col-6">
                <!-- small box -->
                <div class="small-box bg-success">
                    <div class="inner">
                        <h3>{{ number_format($totalBalance->balance / 100, 2) }}</h3>

                        <p>Master Total Balance</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-stats-bars"></i>
                    </div>
                    <a href="{{ route('admin.agent.index') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>

                </div>
            </div>
            @endif
            @if ($role['0'] == 'Master')
            <div class="col-lg-4 col-6">
                <!-- small box -->
                <div class="small-box bg-success">
                    <div class="inner">
                        <h3>{{ number_format($totalBalance->balance / 100, 2) }}</h3>
                        <p>Agent Total Balance</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-stats-bars"></i>
                    </div>
                    <a href="{{ route('admin.agent.index') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            @endif
            <!-- ./col -->
            <!-- ./col -->
            @can('senior_access')
            <div class="col-lg-4 col-6">
                <!-- small box -->
                <div class="small-box bg-danger">
                    <div class="inner">
                        @if ($playerBalance)
                        <h3>{{ number_format($playerBalance->balance / 100, 2) }}</h3>
                        @else
                        <h3>0.00</h3>
                        @endif
                        <p>Player Balance</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>
                    <a href="{{ route('admin.playerList') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            @endcan

            <!-- ./col -->

            @can('senior_owner_access')
            <div class="col-lg-4 col-6">
                <!-- small box -->
                <div class="small-box bg-warning">
                    <form action="{{ route('admin.balanceUp') }}" method="post">
                        @csrf
                        <div class="card-header p-3 pb-0">
                            <h6 class="mb-1">Update Balance</h6>
                            <p class="text-sm mb-0">
                                Seninor can update balance.
                            </p>
                        </div>
                        <div class="card-body p-3">
                            <div class="input-group input-group-static my-4">
                                <label>Amount</label>
                                <input type="integer" class="form-control" name="balance">
                            </div>

                            <button class="btn bg-gradient-dark mb-0 float-end">Update </button>
                        </div>
                    </form>
                </div>
            </div>
            @endcan
            @can('master_access')
            <div class="col-lg-4 col-6">
                <!-- small box -->
                <div class="small-box bg-warning">
                    <div class="inner">
                        <h3>{{ $totalAgent }}</h3>
                        <p>Total Agent</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>
                    <a href="{{ route('admin.agent.index') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            @endcan
            @can('agent_access')
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-primary">
                    <div class="inner">
                        <h3>{{ $totalPlayer }}</h3>
                        <p>Total Player</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>
                    <a href="{{ route('admin.player.index') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-warning">
                    <div class="inner">
                        <h3>{{number_format($totalWinlose,2)}}</h3>
                        <p>Total WinLose</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>
                    <a href="{{ route('admin.player.index') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-gray">
                    <div class="inner">
                        <h3>{{number_format($todayWinlose,2)}}</h3>
                        <p>Today WinLose</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>
                    <a href="{{ route('admin.player.index') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-success">
                    <div class="inner">
                        <h3>{{number_format($todayDeposit,2)}}</h3>
                        <p>Today Deposit</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>
                    <a href="{{ route('admin.player.index') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-danger">
                    <div class="inner">
                        <h3>{{number_format($todayWithdraw,2)}}</h3>
                        <p>Today Withdraw</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>
                    <a href="{{ route('admin.player.index') }}" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            @endcan
            <!-- ./col -->
        </div>
    </div>
</section>
@endsection


INSERT INTO game_types (name, name_mm, code, img, status, `order`, created_at, updated_at)
VALUES (
    'Bingo',
    'Bingoဂိမ်း',
    '1',
    'slot.png',
    1,
    '1',
    NOW(),
    NOW()
);


<?php

namespace App\Console\Commands;

use App\Models\Admin\GameList;
use App\Models\Report;
use App\Models\User;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class PullReport extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'make:pull-report';

    protected $operatorCode;

    protected $secretKey;

    protected $apiUrl;

    public const VERSION_KEY = 1;

    public function __construct()
    {
        parent::__construct();
        $this->operatorCode = config('game.api.operator_code');
        $this->secretKey = config('game.api.secret_key');
        $this->apiUrl = config('game.api.url');
    }

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $apiUrl = $this->apiUrl.'/Seamless/PullReport';

        $operatorCode = Config::get('game.api.operator_code');
        $secretKey = Config::get('game.api.secret_key');
        // Generate the signature
        $requestTime = now()->format('YmdHis');
        $signature = md5($operatorCode.$requestTime.'pullreport'.$secretKey);
        // Prepare the payload
        $startDate = now()->subMinutes(2);

        $data = [
            'OperatorCode' => $operatorCode,
            'StartDate' => $startDate->format('Y-m-d H:i'),
            'EndDate' => $startDate->copy()->addMinutes(5)->format('Y-m-d H:i'),
            'Sign' => $signature,
            'RequestTime' => $requestTime,
        ];
        //Log::info($data);
        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
            'Accept' => 'application/json',
        ])->post($apiUrl, $data);

        if ($response->successful()) {
            $data = $response->json();
            //Log::info($data);
            if ($data['Wagers'] != null) {
                $data = $response['Wagers'];
                //Log::info($response);
                // $user = Auth::user(); // Get the authenticated user
                foreach ($data as $report) {
                    $wagerId = Report::where('wager_id', $report['WagerID'])->first();
                    $user = User::where('user_name', $report['MemberName'])->first();
                    $game_name = GameList::where('code', $report['GameID'])->first();
                    $report_game_name = $game_name->name;
                    if ($wagerId) {
                        $wagerId->update([
                            'member_name' => $report['MemberName'],
                            'wager_id' => $report['WagerID'],
                            'product_code' => $report['ProductID'],
                            'game_type_id' => $report['GameType'],
                            //'game_name' => $report['GameID'],
                            'game_name' => $report_game_name,
                            'game_round_id' => $report['GameRoundID'],
                            'valid_bet_amount' => $report['ValidBetAmount'],
                            'bet_amount' => $report['BetAmount'],
                            'payout_amount' => $report['PayoutAmount'],
                            'commission_amount' => $report['CommissionAmount'],
                            'jack_pot_amount' => $report['JackpotAmount'],
                            'jp_bet' => $report['JPBet'],
                            'status' => $report['Status'],
                            'created_on' => $report['CreatedOn'],
                            'modified_on' => $report['ModifiedOn'],
                            // 'settlement_date' => $report['SettlementDate'],
                            'settlement_date' => $report['SettlementDate'] ?? now(),
                            'agent_id' => $user->agent_id, // Store the agent_id
                            'agent_commission' => 0.00,

                            //'agent_commission' => $grossCommission,
                        ]);
                    } else {
                        Report::create([
                            'member_name' => $report['MemberName'],
                            'wager_id' => $report['WagerID'],
                            'product_code' => $report['ProductID'],
                            'game_type_id' => $report['GameType'],
                            'game_name' => $report['GameID'],
                            'game_round_id' => $report['GameRoundID'],
                            'valid_bet_amount' => $report['ValidBetAmount'],
                            'bet_amount' => $report['BetAmount'],
                            'payout_amount' => $report['PayoutAmount'],
                            'commission_amount' => $report['CommissionAmount'],
                            'jack_pot_amount' => $report['JackpotAmount'],
                            'jp_bet' => $report['JPBet'],
                            'status' => $report['Status'],
                            'created_on' => $report['CreatedOn'],
                            'modified_on' => $report['ModifiedOn'],
                            //'settlement_date' => $report['SettlementDate'],
                            'settlement_date' => $report['SettlementDate'] ?? now(),
                            'agent_id' => $user->agent_id, // Store the agent_id
                            'agent_commission' => 0.00,

                        ]);
                    }
                }
            }
            $this->line('<fg=green>Pull Report success</>');
        } else {
            $this->line('<fg=green>Api Call Error</>');
        }
    }
}


------------- 
<?php

namespace App\Console\Commands;

use App\Models\Admin\GameList;
use App\Models\Report;
use App\Models\User;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;

class PullReportUpdateVersion extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:pull-report-update-version';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $operatorCode;

    protected $secretKey;

    protected $apiUrl;

    public const VERSION_KEY = 1;

    public function __construct()
    {
        parent::__construct();
        $this->operatorCode = config('game.api.operator_code');
        $this->secretKey = config('game.api.secret_key');
        $this->apiUrl = config('game.api.url');
    }
    protected $description = 'Command description';

    /**
     * Execute the console command.
     */
    public function handle()
{
    $lockKey = 'pullreport-api-lock'; // You can change this key if needed
    $lockTimeout = 60; // Lock timeout in seconds, adjust as needed

    $lock = Cache::lock($lockKey, $lockTimeout);

    if ($lock->get()) {
        try {
            $apiUrl = $this->apiUrl.'/Seamless/PullReport';

            $operatorCode = Config::get('game.api.operator_code');
            $secretKey = Config::get('game.api.secret_key');
            // Generate the signature
            $requestTime = now()->format('YmdHis');
            $signature = md5($operatorCode.$requestTime.'pullreport'.$secretKey);
            // Prepare the payload
            $startDate = now()->subMinutes(2);
    
            $data = [
                'OperatorCode' => $operatorCode,
                'StartDate' => $startDate->format('Y-m-d H:i:s'),
                'EndDate' => $startDate->copy()->addMinutes(5)->format('Y-m-d H:i:s'),
                'Sign' => $signature,
                'RequestTime' => $requestTime,
            ];
            //Log::info($data);
            $response = Http::withHeaders([
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
            ])->post($apiUrl, $data);
    
            if ($response->successful()) {
                $data = $response->json();
                //Log::debug('PullReport Request Payload', $data);
                //Log::debug('PullReport API Response', ['body' => $response->body()]);
                //Log::info($data);
                if (isset($data['ErrorCode']) && $data['ErrorCode'] !== 0) {
                    Log::error('PullReport API Error', ['ErrorCode' => $data['ErrorCode'], 'ErrorMessage' => $data['ErrorMessage']]);
                    $this->line('<fg=red>API Error: ' . $data['ErrorMessage'] . '</>');
                    return;
                }
                if (!empty($data['Wagers'])) {
                    $wagers = $data['Wagers'];
                    foreach ($wagers as $report) {
                        $wagerId = Report::where('wager_id', $report['WagerID'])->first();
                        $user = User::where('user_name', $report['MemberName'])->first();
                        $game_name = GameList::where('code', $report['GameID'])->first();
                        $report_game_name = $game_name ? $game_name->name : $report['GameID'];
                        $agent_id = $user ? $user->agent_id : null;
                        if ($wagerId) {
                            $wagerId->update([
                                'member_name' => $report['MemberName'],
                                'wager_id' => $report['WagerID'],
                                'product_code' => $report['ProductID'],
                                'game_type_id' => $report['GameType'],
                                //'game_name' => $report['GameID'],
                                'game_name' => $report_game_name,
                                'game_round_id' => $report['GameRoundID'],
                                'valid_bet_amount' => $report['ValidBetAmount'],
                                'bet_amount' => $report['BetAmount'],
                                'payout_amount' => $report['PayoutAmount'],
                                'commission_amount' => $report['CommissionAmount'],
                                'jack_pot_amount' => $report['JackpotAmount'],
                                'jp_bet' => $report['JPBet'],
                                'status' => $report['Status'],
                                'created_on' => $report['CreatedOn'],
                                'modified_on' => $report['ModifiedOn'],
                                // 'settlement_date' => $report['SettlementDate'],
                                'settlement_date' => $report['SettlementDate'] ?? now(),
                                'agent_id' => $agent_id, // Store the agent_id
                                'agent_commission' => 0.00,
                            ]);
                        } else {
                            Report::create([
                                'member_name' => $report['MemberName'],
                                'wager_id' => $report['WagerID'],
                                'product_code' => $report['ProductID'],
                                'game_type_id' => $report['GameType'],
                                'game_name' => $report_game_name,
                                'game_round_id' => $report['GameRoundID'],
                                'valid_bet_amount' => $report['ValidBetAmount'],
                                'bet_amount' => $report['BetAmount'],
                                'payout_amount' => $report['PayoutAmount'],
                                'commission_amount' => $report['CommissionAmount'],
                                'jack_pot_amount' => $report['JackpotAmount'],
                                'jp_bet' => $report['JPBet'],
                                'status' => $report['Status'],
                                'created_on' => $report['CreatedOn'],
                                'modified_on' => $report['ModifiedOn'],
                                //'settlement_date' => $report['SettlementDate'],
                                'settlement_date' => $report['SettlementDate'] ?? now(),
                                'agent_id' => $agent_id, // Store the agent_id
                                'agent_commission' => 0.00,
                            ]);
                        }
                    }
                }
                $this->line('<fg=green>Pull Report success</>');
            } else {
                Log::error('PullReport API Call Failed', ['response' => $response->body()]);
                $this->line('<fg=red>Api Call Error</>');
            }
        } finally {
            $lock->release();
        }
    } else {
        Log::warning('PullReport: Another process is already running. Skipping this run.');
        $this->line('<fg=yellow>Another PullReport process is running. Skipping.</>');
    }
}
}

------------ 
new pull report update --------- 
<?php

namespace App\Console\Commands;

use App\Models\Admin\GameList;
use App\Models\Report;
use App\Models\User;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;
class NewPullReport extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:new-pull-report';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Call Seamless PullReport API and log/display the response.';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $operatorCode = config('game.api.operator_code');
        $secretKey = config('game.api.secret_key');
        $apiUrl = config('game.api.url') . '/Seamless/PullReport';

        $endDate = now();
        $startDate = $endDate->copy()->subMinutes(5);
        $requestTime = now()->format('YmdHis');
        $sign = md5($operatorCode . $requestTime . 'pullreport' . $secretKey);

        $payload = [
            'OperatorCode' => $operatorCode,
            'StartDate' => $startDate->format('Y-m-d H:i:s'),
            'EndDate' => $endDate->format('Y-m-d H:i:s'),
            'Sign' => $sign,
            'RequestTime' => $requestTime,
        ];

       // Log::info('NewPullReport request payload', $payload);
       // $this->info('Request Payload: ' . json_encode($payload));

        try {
            $response = Http::withHeaders([
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
            ])->post($apiUrl, $payload);

           // Log::info('NewPullReport API response', ['body' => $response->body()]);
            //$this->info('API Response: ' . $response->body());

            if ($response->successful() && $response->json('ErrorCode') == 0) {
                $data = $response->json();
                if (!empty($data['Wagers'])) {
                    foreach ($data['Wagers'] as $wager) {
                        $existing = Report::where('wager_id', $wager['WagerID'])->first();
                        $user = User::where('user_name', $wager['MemberName'])->first();
                                $game_name = GameList::where('code', $wager['GameID'])->first();
                                $report_game_name = $game_name ? $game_name->name : $wager['GameID'];
                                $agent_id = $user ? $user->agent_id : null;
                        $fields = [
                            'member_name' => $wager['MemberName'],
                            'wager_id' => $wager['WagerID'],
                            'product_code' => $wager['ProductID'],
                            'game_type_id' => $wager['GameType'],
                            'game_name' => $report_game_name,
                            'game_round_id' => $wager['GameRoundID'],
                            'valid_bet_amount' => $wager['ValidBetAmount'],
                            'bet_amount' => $wager['BetAmount'],
                            'payout_amount' => $wager['PayoutAmount'],
                            'commission_amount' => $wager['CommissionAmount'],
                            'jack_pot_amount' => $wager['JackpotAmount'],
                            'jp_bet' => $wager['JPBet'],
                            'status' => $wager['Status'],
                            'created_on' => $wager['CreatedOn'],
                            'settlement_date' => $wager['SettlementDate'] ?? now(),
                            'modified_on' => $wager['ModifiedOn'],
                            'agent_id' => $agent_id,
                            'agent_commission' => 0.00,
                        ];
                        if ($existing) {
                            $existing->update($fields);
                           // Log::info('Wager updated', ['wager_id' => $wager['WagerID']]);
                        } else {
                            Report::create($fields);
                            //Log::info('Wager created', ['wager_id' => $wager['WagerID']]);
                        }
                    }
                   // $this->info('All wagers processed and stored in reports table.');
                } else {
                    $this->info('No wagers found in response.');
                }
            } else {
                $this->error('API call failed with status: ' . $response->status());
            }
        } catch (\Exception $e) {
            Log::error('NewPullReport Exception', ['message' => $e->getMessage()]);
            $this->error('Exception: ' . $e->getMessage());
        }
    }
}

----------------- 
<?php

namespace App\Http\Controllers\Api\V1\Webhook\Gsc\Traits;

use App\Enums\TransactionName;
use App\Enums\WagerStatus;
use App\Http\Requests\Slot\SlotWebhookRequest;
use App\Models\Admin\GameType;
use App\Models\Admin\GameTypeProduct;
use App\Models\Admin\Product;
use App\Models\SeamlessEvent;
use App\Models\SeamlessTransaction;
use App\Models\User;
use App\Services\WalletService;
use Exception;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Redis;

trait OptimizedBettingProcess
{
    public function placeBetProcess(SlotWebhookRequest $request)
    {
        $userId = $request->getMember()->id;

        // Try to acquire a Redis lock for the user's wallet
        $lock = Redis::set("wallet:lock:$userId", true, 'EX', 10, 'NX');  // 10-second lock

        if (! $lock) {
            return response()->json(['message' => 'The wallet is currently being updated. Please try again later.'], 409);
        }

        // Create and store the event in the database
        $event = $this->createEvent($request);

        DB::beginTransaction();
        try {
            // Validate the request
            $validator = $request->check();
            if ($validator->fails()) {
                Redis::del("wallet:lock:$userId");

                return $validator->getResponse();
            }

            $before_balance = $request->getMember()->balanceFloat;

            // Retry logic for creating wager transactions with exponential backoff
            $seamless_transactions = $this->retryOnDeadlock(function () use ($validator, $event) {
                return $this->createWagerTransactions($validator->getRequestTransactions(), $event);
            });

            // Process each seamless transaction
            foreach ($seamless_transactions as $seamless_transaction) {
                $this->processTransfer(
                    $request->getMember(),
                    User::adminUser(),
                    TransactionName::Stake,
                    $seamless_transaction->transaction_amount,
                    $seamless_transaction->rate,
                    [
                        'wager_id' => $seamless_transaction->wager_id,
                        'event_id' => $request->getMessageID(),
                        'seamless_transaction_id' => $seamless_transaction->id,
                    ]
                );
            }

            // Refresh balance after transactions
            $request->getMember()->wallet->refreshBalance();
            $after_balance = $request->getMember()->balanceFloat;

            DB::commit();
            Redis::del("wallet:lock::$userId");

            return response()->json([
                'balance_before' => $before_balance,
                'balance_after' => $after_balance,
                'message' => 'Bet placed successfully.',
            ], 200);
        } catch (Exception $e) {
            DB::rollBack();
            Redis::del("wallet:lock::$userId");

            return response()->json(['message' => $e->getMessage()], 500);
        }
    }

    /**
     * Creates wagers in chunks and inserts them along with related seamless transactions.
     */
    // public function insertBets(array $bets, SeamlessEvent $event)
    // {
    //     $chunkSize = 50; // Define the chunk size
    //     $batches = array_chunk($bets, $chunkSize);

    //     $userId = $event->user_id; // Get user_id from SeamlessEvent

    //     // Process chunks in a transaction to ensure data integrity
    //     DB::transaction(function () use ($batches, $event) {
    //         foreach ($batches as $batch) {
    //             // Call createWagerTransactions for each batch
    //             $this->createWagerTransactions($batch, $event);
    //         }
    //     });

    //     return count($bets).' bets inserted successfully.';
    // }

    public function insertBets(array $bets, SeamlessEvent $event)
    {
        $chunkSize = 50;
        $batches = array_chunk($bets, $chunkSize);

        $totalBets = count($bets);
        $processedBets = 0;

        foreach ($batches as $batch) {
            $this->createWagerTransactions($batch, $event);
            $processedBets += count($batch);
        }

        return "$processedBets bets inserted successfully.";
    }

    /**
     * Creates wagers in chunks and inserts them along with related seamless transactions.
     */
    public function createWagerTransactions(array $betBatch, SeamlessEvent $event)
    {
        $retryCount = 0;
        $maxRetries = 5;
        $userId = $event->user_id;
        $seamlessEventId = $event->id;

        do {
            try {
                DB::transaction(function () use ($betBatch, $userId, $seamlessEventId) {
                    $seamlessTransactionsData = [];

                    foreach ($betBatch as $transaction) {
                        if ($transaction instanceof \App\Services\Slot\Dto\RequestTransaction) {
                            $transactionData = [
                                'MemberID' => $transaction->MemberID,
                                'Status' => $transaction->Status,
                                'ProductID' => $transaction->ProductID,
                                'GameType' => $transaction->GameType,
                                'TransactionID' => $transaction->TransactionID,
                                'WagerID' => $transaction->WagerID,
                                'BetAmount' => $transaction->BetAmount,
                                'TransactionAmount' => $transaction->TransactionAmount,
                                'PayoutAmount' => $transaction->PayoutAmount,
                                'ValidBetAmount' => $transaction->ValidBetAmount,
                                'MemberName' => $transaction->MemberName,
                            ];
                        } else {
                            throw new \Exception('Invalid transaction data format.');
                        }

                        // Check for duplicate transaction_id
                        $existingTransaction = SeamlessTransaction::where('transaction_id', $transactionData['TransactionID'])->first();
                        if ($existingTransaction) {
                            Log::warning('Duplicate transaction_id detected in createWagerTransactions', [
                                'transaction_id' => $transactionData['TransactionID'],
                                'wager_id' => $transactionData['WagerID'],
                            ]);
                            throw new \Exception('Duplicate transaction detected: '.$transactionData['TransactionID']);
                        }

                        // Remove lockForUpdate() to reduce contention
                        $existingWager = SeamlessTransaction::where('wager_id', $transactionData['WagerID'])->first();

                        $game_type = GameType::where('code', $transactionData['GameType'])->first();
                        if (! $game_type) {
                            throw new \Exception("Game type not found for {$transactionData['GameType']}");
                        }

                        $product = Product::where('code', $transactionData['ProductID'])->first();
                        if (! $product) {
                            throw new \Exception("Product not found for {$transactionData['ProductID']}");
                        }

                        $game_type_product = GameTypeProduct::where('game_type_id', $game_type->id)
                            ->where('product_id', $product->id)
                            ->first();

                        $rate = $game_type_product->rate;

                        if (! $existingWager) {
                            $seamlessTransactionsData[] = [
                                'user_id' => $userId,
                                'wager_id' => $transactionData['WagerID'],
                                'game_type_id' => $transactionData['GameType'],
                                'product_id' => $transactionData['ProductID'],
                                'transaction_id' => $transactionData['TransactionID'],
                                'rate' => $rate,
                                'transaction_amount' => $transactionData['TransactionAmount'],
                                'payout_amount' => $transactionData['PayoutAmount'],
                                'bet_amount' => $transactionData['BetAmount'],
                                'valid_bet_amount' => $transactionData['ValidBetAmount'],
                                'status' => $transactionData['Status'],
                                'wager_status' => $transactionData['TransactionAmount'] > 0 ? WagerStatus::Win : WagerStatus::Lose,
                                'seamless_event_id' => $seamlessEventId,
                                'member_name' => $transactionData['MemberName'],
                                'created_at' => now(),
                                'updated_at' => now(),
                            ];
                        }
                    }

                    if (! empty($seamlessTransactionsData)) {
                        DB::table('seamless_transactions')->insert($seamlessTransactionsData);
                    }
                });

                break;

            } catch (\Illuminate\Database\QueryException $e) {
                if ($e->getCode() === '40001') {
                    $retryCount++;
                    if ($retryCount >= $maxRetries) {
                        throw $e;
                    }
                    sleep(pow(2, $retryCount)); // Exponential backoff
                } else {
                    throw $e;
                }
            } catch (\Exception $e) {
                throw $e;
            }
        } while ($retryCount < $maxRetries);
    }
    // staging test pass but this method found deadlock
    // public function createWagerTransactions(array $betBatch, SeamlessEvent $event)
    // {
    //     $retryCount = 0;
    //     $maxRetries = 5;
    //     $userId = $event->user_id; // Get user_id from the SeamlessEvent
    //     $seamlessEventId = $event->id; // Get the ID of the SeamlessEvent

    //     // Retry logic for deadlock handling
    //     do {
    //         try {
    //             DB::transaction(function () use ($betBatch, $userId, $seamlessEventId) {
    //                 // Initialize arrays for batch inserts
    //                 $wagerData = [];
    //                 $seamlessTransactionsData = [];

    //                 // Loop through each bet in the batch
    //                 foreach ($betBatch as $transaction) {
    //                     // If transaction is an instance of the RequestTransaction object, extract the data
    //                     if ($transaction instanceof \App\Services\Slot\Dto\RequestTransaction) {
    //                         $transactionData = [
    //                             'MemberID' => $transaction->MemberID,
    //                             'Status' => $transaction->Status,
    //                             'ProductID' => $transaction->ProductID,
    //                             'GameType' => $transaction->GameType,
    //                             'TransactionID' => $transaction->TransactionID,
    //                             'WagerID' => $transaction->WagerID,
    //                             'BetAmount' => $transaction->BetAmount,
    //                             'TransactionAmount' => $transaction->TransactionAmount,
    //                             'PayoutAmount' => $transaction->PayoutAmount,
    //                             'ValidBetAmount' => $transaction->ValidBetAmount,
    //                             'MemberName' => $transaction->MemberName,
    //                         ];
    //                     } else {
    //                         throw new \Exception('Invalid transaction data format.');
    //                     }

    //                     // Now, use the $transactionData array as expected
    //                     $existingWager = SeamlessTransaction::where('wager_id', $transactionData['WagerID'])->lockForUpdate()->first();

    //                     // Fetch game_type and product
    //                     $game_type = GameType::where('code', $transactionData['GameType'])->first();
    //                     if (! $game_type) {
    //                         throw new \Exception("Game type not found for {$transactionData['GameType']}");
    //                     }

    //                     $product = Product::where('code', $transactionData['ProductID'])->first();
    //                     if (! $product) {
    //                         throw new \Exception("Product not found for {$transactionData['ProductID']}");
    //                     }

    //                     // Fetch the rate from GameTypeProduct
    //                     $game_type_product = GameTypeProduct::where('game_type_id', $game_type->id)
    //                         ->where('product_id', $product->id)
    //                         ->first();

    //                     $rate = $game_type_product->rate;  // Fetch rate for this transaction

    //                     //Log::info('Fetched rate for transaction', ['rate' => $rate]);

    //                     if (! $existingWager) {
    //                         // Collect seamless transaction data for batch insert
    //                         $seamlessTransactionsData[] = [
    //                             'user_id' => $userId,  // Use user_id from the SeamlessEvent
    //                             'wager_id' => $transactionData['WagerID'],
    //                             'game_type_id' => $transactionData['GameType'],
    //                             'product_id' => $transactionData['ProductID'],
    //                             'transaction_id' => $transactionData['TransactionID'],
    //                             'rate' => $rate,  // Include rate for the transaction
    //                             'transaction_amount' => $transactionData['TransactionAmount'],
    //                             'payout_amount' => $transactionData['PayoutAmount'],
    //                             'bet_amount' => $transactionData['BetAmount'],
    //                             'valid_bet_amount' => $transactionData['ValidBetAmount'],
    //                             'status' => $transactionData['Status'],
    //                             'wager_status' => $transactionData['TransactionAmount'] > 0 ? WagerStatus::Win : WagerStatus::Lose,
    //                             'seamless_event_id' => $seamlessEventId,  // Include seamless_event_id
    //                             'member_name' => $transactionData['MemberName'],
    //                             'created_at' => now(),
    //                             'updated_at' => now(),
    //                         ];
    //                     }
    //                 }

    //                 if (! empty($seamlessTransactionsData)) {
    //                     DB::table('seamless_transactions')->insert($seamlessTransactionsData); // Insert transactions in bulk
    //                 }
    //             });

    //             break; // Exit the retry loop if successful

    //         } catch (\Illuminate\Database\QueryException $e) {
    //             if ($e->getCode() === '40001') { // Deadlock error code
    //                 $retryCount++;
    //                 if ($retryCount >= $maxRetries) {
    //                     throw $e; // Max retries reached, fail
    //                 }
    //                 sleep(1); // Wait for a second before retrying
    //             } else {
    //                 throw $e; // Rethrow if it's not a deadlock exception
    //             }
    //         }
    //     } while ($retryCount < $maxRetries);
    // }

    public function processTransfer(User $from, User $to, TransactionName $transactionName, float $amount, int $rate, array $meta)
    {
        $retryCount = 0;
        $maxRetries = 5;

        do {
            try {
                // Only lock the necessary rows inside the transaction
                DB::transaction(function () use ($from, $to, $amount, $transactionName, $meta) {
                    // Lock only the specific rows for the wallet that needs updating
                    $walletFrom = $from->wallet()->lockForUpdate()->firstOrFail();
                    $walletTo = $to->wallet()->lockForUpdate()->firstOrFail();

                    // Update wallet balances
                    $walletFrom->balance -= $amount;
                    $walletTo->balance += $amount;

                    // Save the updated balances
                    $walletFrom->save();
                    $walletTo->save();

                    // Perform the transfer in the wallet service (possibly outside the transaction)
                    app(WalletService::class)->transfer($from, $to, abs($amount), $transactionName, $meta);
                });

                break;  // Exit loop if successful

            } catch (\Illuminate\Database\QueryException $e) {
                if ($e->getCode() === '40001') {  // Deadlock error code
                    $retryCount++;
                    if ($retryCount >= $maxRetries) {
                        throw $e;  // Max retries reached, fail
                    }
                    sleep(1);  // Wait before retrying
                } else {
                    throw $e;  // Rethrow non-deadlock exceptions
                }
            }
        } while ($retryCount < $maxRetries);
    }

    /**
     * Retry logic for handling deadlocks with exponential backoff.
     */
    private function retryOnDeadlock(callable $callback, $maxRetries = 5)
    {
        $retryCount = 0;

        do {
            try {
                return $callback();
            } catch (\Illuminate\Database\QueryException $e) {
                if ($e->getCode() === '40001') {  // Deadlock error code
                    $retryCount++;
                    if ($retryCount >= $maxRetries) {
                        throw $e;  // Max retries reached, fail
                    }
                    sleep(pow(2, $retryCount));  // Exponential backoff
                } else {
                    throw $e;  // Rethrow non-deadlock exceptions
                }
            }
        } while ($retryCount < $maxRetries);
    }

    /**
     * Create the event in the system.
     */
    public function createEvent(SlotWebhookRequest $request): SeamlessEvent
    {
        return SeamlessEvent::create([
            'user_id' => $request->getMember()->id,
            'message_id' => $request->getMessageID(),
            'product_id' => $request->getProductID(),
            'request_time' => $request->getRequestTime(),
            'raw_data' => $request->all(),
        ]);
    }
}

